<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>算法提高清单</title>
    <url>/2022/09/01/%E7%AE%97%E6%B3%95%E6%8F%90%E9%AB%98%E6%B8%85%E5%8D%95/</url>
    <content><![CDATA[<h1 id="算法提高清单"><a href="#算法提高清单" class="headerlink" title="算法提高清单"></a>算法提高清单</h1><h2 id="一、基础算法"><a href="#一、基础算法" class="headerlink" title="一、基础算法"></a>一、基础算法</h2><h3 id="1-位运算"><a href="#1-位运算" class="headerlink" title="1.位运算"></a>1.位运算</h3><h3 id="2-递推与递归"><a href="#2-递推与递归" class="headerlink" title="2.递推与递归"></a>2.递推与递归</h3><h3 id="3-前缀和与差分"><a href="#3-前缀和与差分" class="headerlink" title="3.前缀和与差分"></a>3.前缀和与差分</h3><span id="more"></span>

<h3 id="4-二分"><a href="#4-二分" class="headerlink" title="4.二分"></a>4.二分</h3><h3 id="5-排序"><a href="#5-排序" class="headerlink" title="5.排序"></a>5.排序</h3><h3 id="6-RMQ"><a href="#6-RMQ" class="headerlink" title="6.RMQ"></a>6.RMQ</h3><h2 id="二、搜索"><a href="#二、搜索" class="headerlink" title="二、搜索"></a>二、搜索</h2><h3 id="1-Flood-Fill"><a href="#1-Flood-Fill" class="headerlink" title="1.Flood Fill"></a>1.Flood Fill</h3><h3 id="2-最短路模型"><a href="#2-最短路模型" class="headerlink" title="2.最短路模型"></a>2.最短路模型</h3><h3 id="3-多源BFS"><a href="#3-多源BFS" class="headerlink" title="3.多源BFS"></a>3.多源BFS</h3><h3 id="4-最小步数模型"><a href="#4-最小步数模型" class="headerlink" title="4.最小步数模型"></a>4.最小步数模型</h3><h3 id="5-双端队列广搜"><a href="#5-双端队列广搜" class="headerlink" title="5.双端队列广搜"></a>5.双端队列广搜</h3><h3 id="6-双向光搜"><a href="#6-双向光搜" class="headerlink" title="6.双向光搜"></a>6.双向光搜</h3><h3 id="7-A"><a href="#7-A" class="headerlink" title="7.A*"></a>7.A*</h3><h3 id="8-DFS连通性模型"><a href="#8-DFS连通性模型" class="headerlink" title="8.DFS连通性模型"></a>8.DFS连通性模型</h3><h3 id="9-DFS搜索顺序"><a href="#9-DFS搜索顺序" class="headerlink" title="9.DFS搜索顺序"></a>9.DFS搜索顺序</h3><h3 id="10-DFS剪枝与优化"><a href="#10-DFS剪枝与优化" class="headerlink" title="10.DFS剪枝与优化"></a>10.DFS剪枝与优化</h3><h3 id="11-迭代加深"><a href="#11-迭代加深" class="headerlink" title="11.迭代加深"></a>11.迭代加深</h3><h3 id="12-双向DFS"><a href="#12-双向DFS" class="headerlink" title="12.双向DFS"></a>12.双向DFS</h3><h3 id="13-IDA"><a href="#13-IDA" class="headerlink" title="13.IDA*"></a>13.IDA*</h3><h2 id="三、数据结构"><a href="#三、数据结构" class="headerlink" title="三、数据结构"></a>三、数据结构</h2><h3 id="1-并查集"><a href="#1-并查集" class="headerlink" title="1.并查集"></a>1.并查集</h3><h3 id="2-树状数组"><a href="#2-树状数组" class="headerlink" title="2.树状数组"></a>2.树状数组</h3><h3 id="3-线段树"><a href="#3-线段树" class="headerlink" title="3.线段树"></a>3.线段树</h3><h3 id="4-可持久化数据结构"><a href="#4-可持久化数据结构" class="headerlink" title="4.可持久化数据结构"></a>4.可持久化数据结构</h3><h3 id="5-平衡树"><a href="#5-平衡树" class="headerlink" title="5.平衡树"></a>5.平衡树</h3><h3 id="6-AC自动机"><a href="#6-AC自动机" class="headerlink" title="6.AC自动机"></a>6.AC自动机</h3><h2 id="四、动态规划"><a href="#四、动态规划" class="headerlink" title="四、动态规划"></a>四、动态规划</h2><h3 id="1-数字三角形模型"><a href="#1-数字三角形模型" class="headerlink" title="1.数字三角形模型"></a>1.数字三角形模型</h3><h3 id="2-最长上升子序列"><a href="#2-最长上升子序列" class="headerlink" title="2.最长上升子序列"></a>2.最长上升子序列</h3><h3 id="3-背包模型"><a href="#3-背包模型" class="headerlink" title="3.背包模型"></a>3.背包模型</h3><h3 id="4-状态机模型"><a href="#4-状态机模型" class="headerlink" title="4.状态机模型"></a>4.状态机模型</h3><h3 id="5-状态压缩DP"><a href="#5-状态压缩DP" class="headerlink" title="5.状态压缩DP"></a>5.状态压缩DP</h3><h3 id="6-区间DP"><a href="#6-区间DP" class="headerlink" title="6.区间DP"></a>6.区间DP</h3><h3 id="7-树形DP"><a href="#7-树形DP" class="headerlink" title="7.树形DP"></a>7.树形DP</h3><h3 id="8-数位DP"><a href="#8-数位DP" class="headerlink" title="8.数位DP"></a>8.数位DP</h3><h3 id="9-单调队列优化DP"><a href="#9-单调队列优化DP" class="headerlink" title="9.单调队列优化DP"></a>9.单调队列优化DP</h3><h3 id="10-斜率优化DP"><a href="#10-斜率优化DP" class="headerlink" title="10.斜率优化DP"></a>10.斜率优化DP</h3><h2 id="五、图论"><a href="#五、图论" class="headerlink" title="五、图论"></a>五、图论</h2><h3 id="1-单源最短路"><a href="#1-单源最短路" class="headerlink" title="1.单源最短路"></a>1.单源最短路</h3><h3 id="2-Floyd"><a href="#2-Floyd" class="headerlink" title="2.Floyd"></a>2.Floyd</h3><h3 id="3-最小生成树"><a href="#3-最小生成树" class="headerlink" title="3.最小生成树"></a>3.最小生成树</h3><h3 id="4-负环"><a href="#4-负环" class="headerlink" title="4.负环"></a>4.负环</h3><h3 id="5-差分约束"><a href="#5-差分约束" class="headerlink" title="5.差分约束"></a>5.差分约束</h3><h3 id="6-最近公共祖先"><a href="#6-最近公共祖先" class="headerlink" title="6.最近公共祖先"></a>6.最近公共祖先</h3><h3 id="7-有向图的强连通分量"><a href="#7-有向图的强连通分量" class="headerlink" title="7.有向图的强连通分量"></a>7.有向图的强连通分量</h3><h2 id="六、数论"><a href="#六、数论" class="headerlink" title="六、数论"></a>六、数论</h2><h3 id="1-质数筛"><a href="#1-质数筛" class="headerlink" title="1.质数筛"></a>1.质数筛</h3><h3 id="2-分解质因数"><a href="#2-分解质因数" class="headerlink" title="2.分解质因数"></a>2.分解质因数</h3><h3 id="3-快速幂"><a href="#3-快速幂" class="headerlink" title="3.快速幂"></a>3.快速幂</h3><h3 id="4-约数个数"><a href="#4-约数个数" class="headerlink" title="4.约数个数"></a>4.约数个数</h3><h3 id="5-欧拉函数"><a href="#5-欧拉函数" class="headerlink" title="5.欧拉函数"></a>5.欧拉函数</h3><h3 id="6-同余"><a href="#6-同余" class="headerlink" title="6.同余"></a>6.同余</h3><h3 id="7-矩阵乘法"><a href="#7-矩阵乘法" class="headerlink" title="7.矩阵乘法"></a>7.矩阵乘法</h3><h3 id="8-组合计数"><a href="#8-组合计数" class="headerlink" title="8.组合计数"></a>8.组合计数</h3><h3 id="9-高斯消元"><a href="#9-高斯消元" class="headerlink" title="9.高斯消元"></a>9.高斯消元</h3><h3 id="10-容斥原理"><a href="#10-容斥原理" class="headerlink" title="10.容斥原理"></a>10.容斥原理</h3><h3 id="11-概率与数学期望"><a href="#11-概率与数学期望" class="headerlink" title="11.概率与数学期望"></a>11.概率与数学期望</h3><h3 id="12-博弈论"><a href="#12-博弈论" class="headerlink" title="12.博弈论"></a>12.博弈论</h3>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法名单</tag>
      </tags>
  </entry>
  <entry>
    <title>markdown常用公式</title>
    <url>/2022/09/04/markdown%E5%B8%B8%E7%94%A8%E5%85%AC%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="markdown常用公式"><a href="#markdown常用公式" class="headerlink" title="markdown常用公式"></a>markdown常用公式</h1><blockquote>
<p>本文章的公式应用于LaTeX</p>
</blockquote>
<h2 id="一-公式形式"><a href="#一-公式形式" class="headerlink" title="一.公式形式"></a>一.公式形式</h2><ul>
<li><p>行内公式：$ f(x) = \int_0^\infty e^{x-1}dx, $</p>
</li>
<li><p>行间公式：</p>
</li>
<li><p>$$<br>f(x) = \int_0^\infty e^{x-1}dx,<br>$$</p>
<blockquote>
<p>下面是上式代码</p>
</blockquote>
<span id="more"></span></li>
</ul>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="built_in">$</span> <span class="keyword">\f</span>(x) = <span class="keyword">\int</span><span class="built_in">_</span>0<span class="built_in">^</span><span class="keyword">\infty</span> e<span class="built_in">^</span>&#123;x-1&#125;dx<span class="keyword">\,</span> <span class="built_in">$</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br><span class="line"><span class="keyword">\f</span>(x) = <span class="keyword">\int</span><span class="built_in">_</span>0<span class="built_in">^</span><span class="keyword">\infty</span> e<span class="built_in">^</span>&#123;x-1&#125;dx<span class="keyword">\,</span></span><br><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br></pre></td></tr></table></figure>

<h2 id="二-希腊字母"><a href="#二-希腊字母" class="headerlink" title="二.希腊字母"></a>二.希腊字母</h2><table>
<thead>
<tr>
<th align="center">名称</th>
<th align="center">大写</th>
<th align="center">code</th>
<th align="center">小写</th>
<th align="center">code</th>
</tr>
</thead>
<tbody><tr>
<td align="center">alpha</td>
<td align="center">A</td>
<td align="center">A</td>
<td align="center">α</td>
<td align="center">\alpha</td>
</tr>
<tr>
<td align="center">beta</td>
<td align="center">B</td>
<td align="center">B</td>
<td align="center">β</td>
<td align="center">\beta</td>
</tr>
<tr>
<td align="center">gamma</td>
<td align="center">Γ</td>
<td align="center">\Gamma</td>
<td align="center">γ</td>
<td align="center">\gamma</td>
</tr>
<tr>
<td align="center">delta</td>
<td align="center">Δ</td>
<td align="center">\Delta</td>
<td align="center">δ</td>
<td align="center">\delta</td>
</tr>
<tr>
<td align="center">epsilon</td>
<td align="center">E</td>
<td align="center">E</td>
<td align="center">ϵ</td>
<td align="center">\epsilon</td>
</tr>
<tr>
<td align="center">zeta</td>
<td align="center">Z</td>
<td align="center">Z</td>
<td align="center">ζ</td>
<td align="center">\zeta</td>
</tr>
<tr>
<td align="center">eta</td>
<td align="center">H</td>
<td align="center">H</td>
<td align="center">η</td>
<td align="center">\eta</td>
</tr>
<tr>
<td align="center">theta</td>
<td align="center">Θ</td>
<td align="center">\Theta</td>
<td align="center">θ</td>
<td align="center">\theta</td>
</tr>
<tr>
<td align="center">iota</td>
<td align="center">I</td>
<td align="center">I</td>
<td align="center">ι</td>
<td align="center">\iota</td>
</tr>
<tr>
<td align="center">kappa</td>
<td align="center">K</td>
<td align="center">K</td>
<td align="center">κ</td>
<td align="center">\kappa</td>
</tr>
<tr>
<td align="center">lambda</td>
<td align="center">Λ</td>
<td align="center">\Lambda</td>
<td align="center">λ</td>
<td align="center">\lambda</td>
</tr>
<tr>
<td align="center">mu</td>
<td align="center">M</td>
<td align="center">M</td>
<td align="center">μ</td>
<td align="center">\mu</td>
</tr>
<tr>
<td align="center">nu</td>
<td align="center">N</td>
<td align="center">N</td>
<td align="center">ν</td>
<td align="center">\nu</td>
</tr>
<tr>
<td align="center">xi</td>
<td align="center">Ξ</td>
<td align="center">\Xi</td>
<td align="center">ξ</td>
<td align="center">\xi</td>
</tr>
<tr>
<td align="center">omicron</td>
<td align="center">O</td>
<td align="center">O</td>
<td align="center">ο</td>
<td align="center">\omicron</td>
</tr>
<tr>
<td align="center">pi</td>
<td align="center">Π</td>
<td align="center">\Pi</td>
<td align="center">π</td>
<td align="center">\pi</td>
</tr>
<tr>
<td align="center">rho</td>
<td align="center">P</td>
<td align="center">P</td>
<td align="center">ρ</td>
<td align="center">\rho</td>
</tr>
<tr>
<td align="center">sigma</td>
<td align="center">Σ</td>
<td align="center">\Sigma</td>
<td align="center">σ</td>
<td align="center">\sigma</td>
</tr>
<tr>
<td align="center">tau</td>
<td align="center">T</td>
<td align="center">T</td>
<td align="center">τ</td>
<td align="center">\tau</td>
</tr>
<tr>
<td align="center">upsilon</td>
<td align="center">Υ</td>
<td align="center">υ</td>
<td align="center">\upsilon</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">phi</td>
<td align="center">Φ</td>
<td align="center">\Phi</td>
<td align="center">ϕ</td>
<td align="center">\phi</td>
</tr>
<tr>
<td align="center">chi</td>
<td align="center">X</td>
<td align="center">X</td>
<td align="center">χ</td>
<td align="center">\chi</td>
</tr>
<tr>
<td align="center">psi</td>
<td align="center">Ψ</td>
<td align="center">\Psi</td>
<td align="center">ψ</td>
<td align="center">\psi</td>
</tr>
<tr>
<td align="center">omega</td>
<td align="center">Ω</td>
<td align="center">\Omega</td>
<td align="center">ω</td>
<td align="center">\omega</td>
</tr>
</tbody></table>
<h2 id="三-上标与下标"><a href="#三-上标与下标" class="headerlink" title="三.上标与下标"></a>三.上标与下标</h2><p>上标和下标分别使用<code>^</code> 与<code>_</code> ，例如<code>$x_i^2$</code>表示的是：$ x_i^2$。</p>
<p>上标和下标是一个式子需要用<code>&#123;&#125;</code>扩起来，如<code>$\int_&#123;2x&#125; ^&#123;\sqrt 2e&#125;&#125;xdx$</code>：$\int_{2x} ^{\sqrt {2e}}xdx$</p>
<h2 id="四-括号"><a href="#四-括号" class="headerlink" title="四.括号"></a>四.括号</h2><h3 id="1-小括号与方括号"><a href="#1-小括号与方括号" class="headerlink" title="1.小括号与方括号"></a>1.小括号与方括号</h3><p>无限制，直接使用即可。</p>
<h3 id="2-大括号"><a href="#2-大括号" class="headerlink" title="2.大括号"></a>2.大括号</h3><p>由于大括号<code>&#123;&#125;</code> 被用于分组，因此需要使用<code>\&#123;</code>和<code>\&#125;</code>表示大括号，也可以使用<code>\lbrace</code> 和<code>\rbrace</code>来表示。如<code>$\&#123;a,b,c\&#125;$</code> 或<code>$\lbrace a,b,c\rbrace $</code> 表示：${a,b,c}$</p>
<h3 id="3-尖括号"><a href="#3-尖括号" class="headerlink" title="3.尖括号"></a>3.尖括号</h3><p>使用<code>\langle</code> 和<code>\rangle</code> 表示左尖括号和右尖括号。如<code>$\langle x \rangle$</code> 表示：$\langle x \rangle$</p>
<h3 id="4-上取整"><a href="#4-上取整" class="headerlink" title="4.上取整"></a>4.上取整</h3><p>使用<code>\lceil</code> 和 <code>\rceil</code> 表示。 如<code>$\lceil x \rceil$</code>：$\lceil x \rceil$</p>
<h3 id="5-下取整"><a href="#5-下取整" class="headerlink" title="5.下取整"></a>5.下取整</h3><p>使用<code>\lfloor</code> 和 <code>\rfloor</code> 表示。如<code>$\lfloor x \rfloor$</code>：$\lfloor x \rfloor$</p>
<h2 id="五-求和与积分"><a href="#五-求和与积分" class="headerlink" title="五.求和与积分"></a>五.求和与积分</h2><h3 id="1-求和"><a href="#1-求和" class="headerlink" title="1.求和"></a>1.求和</h3><p><code>\sum</code> 用来表示求和符号，其下标表示求和下限，上标表示上限。</p>
<p>如<code>$\sum_&#123;i=1&#125;^n$</code>：$\sum_{i=1}^n$</p>
<h3 id="2-积分"><a href="#2-积分" class="headerlink" title="2.积分"></a>2.积分</h3><p><code>\int</code>用来表示积分符号，同求和。</p>
<p>如<code>$\int_0^&#123;2x&#125;$</code>：$\int_0^{2x}$</p>
<p>特别的：</p>
<p><code>$\iint_0^x$</code>：$\iint_0^x$</p>
<p><code>$\iiint_0^x$</code>：$\iiint_0^x$</p>
<h3 id="3-连乘"><a href="#3-连乘" class="headerlink" title="3.连乘"></a>3.连乘</h3><p><code>$\prod_&#123;i=1&#125;^&#123;n&#125; i$</code>：$\prod_{i=1}^{n} i$</p>
<h2 id="六-分式与根式"><a href="#六-分式与根式" class="headerlink" title="六.分式与根式"></a>六.分式与根式</h2><h3 id="1-分式"><a href="#1-分式" class="headerlink" title="1.分式"></a>1.分式</h3><ul>
<li>方法一：<code>\frac &#123;a+b+1&#125;&#123;c+d+2&#125;</code>：$\frac {a+b+1}{c+d+2}$</li>
<li>方法二：<code>$&#123;a+b+1 \over c+d+2&#125;$</code>：${a+b+1 \over c+d+2}$</li>
</ul>
<h3 id="2-连分式"><a href="#2-连分式" class="headerlink" title="2.连分式"></a>2.连分式</h3><p><code>\frac</code>和<code>$\cfrac$</code>都可，但后者表现更好。</p>
<p>如：<code>$$x = \frac &#123;a_1 + 1&#125;&#123;\frac &#123;a_2 + 2&#125;&#123;a_3 + \frac&#123;a_4 + 4&#125;&#123;a_5 + 5&#125; + 3&#125; + 6&#125; + 7$$</code><br>$$<br>x = \frac {a_1 + 1}{\frac {a_2 + 2}{a_3 + \frac{a_4 + 4}{a_5 + 5} + 3} + 6} + 7<br>$$<br>和：<code>$$x = \cfrac &#123;a_1 + 1&#125;&#123;\cfrac &#123;a_2 + 2&#125;&#123;a_3 + \cfrac&#123;a_4 + 4&#125;&#123;a_5 + 5&#125; + 3&#125; + 6&#125; + 7$$</code><br>$$<br>x = \cfrac {a_1 + 1}{\cfrac {a_2 + 2}{a_3 + \cfrac{a_4 + 4}{a_5 + 5} + 3} + 6} + 7<br>$$</p>
<h3 id="3-根式"><a href="#3-根式" class="headerlink" title="3.根式"></a>3.根式</h3><p>根式使用<code>\sqrt</code> 来表示。</p>
<p>开平方<code>$\sqrt&#123;\frac &#123;x+1&#125;&#123;y+2&#125;&#125;$</code>：$\sqrt{\frac {x+1}{y+2}}$</p>
<p>开3次方<code>$\sqrt[3]&#123;\frac &#123;x+1&#125;&#123;y+2&#125;&#125;$</code> ：$\sqrt[3]{\frac {x+1}{y+2}}$</p>
<h2 id="七-其他"><a href="#七-其他" class="headerlink" title="七.其他"></a>七.其他</h2><blockquote>
<p>明明在typora显示正常的。。。</p>
<p>以后有机会再看是哪里出了问题（别是我Hexo的LaTeX版本太低了QAQ）</p>
</blockquote>
<h3 id="1-方程组"><a href="#1-方程组" class="headerlink" title="1.方程组"></a>1.方程组</h3><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="variable">$$</span></span><br><span class="line">\left \&#123; </span><br><span class="line">\<span class="keyword">begin</span>&#123;array&#125;&#123;c&#125;</span><br><span class="line">a_1x+b_1y+c_1z=d_1 \\ </span><br><span class="line">a_2x+b_2y+c_2z=d_2 \\ </span><br><span class="line">a_3x+b_3y+c_3z=d_3</span><br><span class="line">\<span class="keyword">end</span>&#123;array&#125;</span><br><span class="line">\right.</span><br><span class="line"><span class="variable">$$</span></span><br></pre></td></tr></table></figure>

<p>$$<br>\left {<br>\begin{array}{c}<br>a_1x+b_1y+c_1z=d_1 \<br>a_2x+b_2y+c_2z=d_2 \<br>a_3x+b_3y+c_3z=d_3<br>\end{array}<br>\right.<br>$$</p>
<h3 id="2-表格"><a href="#2-表格" class="headerlink" title="2.表格"></a>2.表格</h3><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="variable">$$</span></span><br><span class="line">\<span class="keyword">begin</span>&#123;array&#125;&#123;c|<span class="params">ccr&#125; //ccr居中对齐 lcr左对齐 rcr右对齐</span></span><br><span class="line"><span class="params">码农大赛 &amp; \text&#123;1号&#125; &amp; \text&#123;2号&#125; &amp; \text&#123;3号&#125; </span></span><br><span class="line"><span class="params">\hline</span></span><br><span class="line"><span class="params">第1次 &amp; 0.24 &amp; 1 &amp; 125 \\</span></span><br><span class="line"><span class="params">第2次 &amp; -1 &amp; 189 &amp; -8 \\</span></span><br><span class="line"><span class="params">第3次 &amp; -20 &amp; 2000 &amp; 11 \\</span></span><br><span class="line"><span class="params">\<span class="keyword">end</span>&#123;array&#125;</span></span><br><span class="line"><span class="params">$$</span></span><br></pre></td></tr></table></figure>

<p>$$<br>\begin{array}{c|ccr}<br>码农大赛 &amp; \text{1号} &amp; \text{2号} &amp; \text{3号} \<br>\hline<br>第1次 &amp; 0.24 &amp; 1 &amp; 125 \<br>第2次 &amp; -1 &amp; 189 &amp; -8 \<br>第3次 &amp; -20 &amp; 2000 &amp; 11 \<br>\end{array}<br>$$</p>
<h3 id="3-矩阵"><a href="#3-矩阵" class="headerlink" title="3.矩阵"></a>3.矩阵</h3><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="variable">$$</span></span><br><span class="line">\<span class="keyword">begin</span>&#123;matrix&#125;</span><br><span class="line"><span class="number">1</span> &amp; x &amp; x^<span class="number">2</span> \\</span><br><span class="line"><span class="number">1</span> &amp; y &amp; y^<span class="number">2</span> \\</span><br><span class="line"><span class="number">1</span> &amp; z &amp; z^<span class="number">2</span> \\</span><br><span class="line">\<span class="keyword">end</span>&#123;matrix&#125;</span><br><span class="line"><span class="variable">$$</span></span><br></pre></td></tr></table></figure>

<p>$$<br>\begin{matrix}<br>1 &amp; x &amp; x^2 \<br>1 &amp; y &amp; y^2 \<br>1 &amp; z &amp; z^2 \<br>\end{matrix}<br>$$</p>
]]></content>
      <categories>
        <category>markdown</category>
      </categories>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>单调队列</title>
    <url>/2022/09/02/%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97/</url>
    <content><![CDATA[<h2 id="单调队列"><a href="#单调队列" class="headerlink" title="单调队列"></a>单调队列</h2><blockquote>
<p>这里引用百度的解释：</p>
<p><a href="https://baike.baidu.com/item/%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97/4319570?fr=aladdin">单调队列</a>，即单调递减或单调递增的<a href="https://baike.baidu.com/item/%E9%98%9F%E5%88%97/718364?fromModule=lemma_inlink">队列</a>。使用频率不高，但在有些程序中会有非同寻常的作用。</p>
</blockquote>
<hr>

<h3 id="1-从例题引入"><a href="#1-从例题引入" class="headerlink" title="1.从例题引入"></a>1.从例题引入</h3><p>POJ 2823 <a href="http://poj.org/problem?id=2823">Sliding Window</a></p>
<p>题意：给出一个长度为 $n$ 的数组，输出每 $k$ 个连续的数中的最大值和最小值。</p>
<span id="more"></span>

<ul>
<li><p>暴力的想法是直接寻找 $n-k+1$ 个区间，分别求每个区间的最大值最小值。显然这个办法是不行的，时间复杂度为 $O(n*k)$</p>
</li>
<li><p>那么如何优化，显然这其中进行了大量重复工作，除了开头 $k-1$ 个和结尾 $k-1$ 个数之外，每个数都进行了 $k$ 次比较，这样是极其不划算的，这里引出单调队列的做法。</p>
</li>
</ul>
<hr>

<h3 id="2-单调队列详解"><a href="#2-单调队列详解" class="headerlink" title="2.单调队列详解"></a>2.单调队列详解</h3><p><em>单调队列</em> 是队列内元素满足单调性的队列结构。<font color=Red>且为了满足队列内元素的单调性，队尾也可弹出元素。</font>此处的单调性分为单调递增与单调递减，为了便于描述，接下来以「单调递增队列」为例进行讲解。</p>
<p><b>单调递增队列中 <em>队尾</em> 的操作与 单调递增栈中 <em>栈顶</em> 的操作一致，即假设当前想要入队的元素为 $x$，若队尾元素 $a_i&lt;= x$，则将 $x$ 入队，否则不断弹出队尾元素，直至队尾元素 $a_i&lt;= x$。</b></p>
<p>例如以数组 1 4 3 5 2 7 为例，若「队首」始终不弹出元素，则其具体过程如下图所示。</p>
<table>
<thead>
<tr>
<th>情况如下</th>
</tr>
</thead>
<tbody><tr>
<td>$1$入队                                               -&gt; <em>[1]</em></td>
</tr>
<tr>
<td>$4&gt;=1$, $4$入队                               -&gt; <em>[1, 4]</em></td>
</tr>
<tr>
<td>$3&lt;4$, $4$出队;  $3&gt;=1$, $3$入队      -&gt; <em>[1, 3]</em></td>
</tr>
<tr>
<td>$5&gt;=3$, $5$入队                               -&gt; <em>[1, 3, 5]</em></td>
</tr>
<tr>
<td>…</td>
</tr>
<tr>
<td>最后的队列为 <em>[1, 2, 7]</em></td>
</tr>
</tbody></table>
<p>由此可知，<font color=Red>单调队列与单调栈的最大区别就在于 <em>队首</em> 的操作，何时将队首元素pop是单调队列算法的关键。</font></p>
<p>然而队首的操作往往具有多样性，并非一成不变，需要根据情况而定。</p>
<p>我们再来看看例题：</p>
<p>要求的是每连续的 个数中的最大（最小）值，很明显，当一个数进入所要 “寻找” 最大值的范围中时，若这个数比其前面（先进队）的数要大，显然，前面的数会比这个数先出队且不再可能是最大值。</p>
<p>也就是说——当满足以上条件时，可将前面的数 “弹出”，再将该数真正 push 进队尾。</p>
<p>这就相当于维护了一个递减的队列，符合单调队列的定义，减少了重复的比较次数，不仅如此，由于维护出的队伍是查询范围内的且是递减的，队头必定是该查询区域内的最大值，因此输出时只需输出队头即可。</p>
<p>显而易见的是，在这样的算法中，每个数只要进队与出队各一次，因此时间复杂度被降到了 。</p>
<p>而由于查询区间长度是固定的，超出查询空间的值再大也不能输出，因此还需要 site 数组记录第 个队中的数在原数组中的位置，以弹出越界的队头。</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>单调队列</tag>
      </tags>
  </entry>
  <entry>
    <title>EasyX 图形库学习心得</title>
    <url>/2022/08/31/Easy%20X%20%E5%9B%BE%E5%BD%A2%E5%BA%93%E5%AD%A6%E4%B9%A0%E5%BF%83%E5%BE%97/</url>
    <content><![CDATA[<h2 id="Easy-X-图形库学习心得"><a href="#Easy-X-图形库学习心得" class="headerlink" title="Easy X 图形库学习心得"></a>Easy X 图形库学习心得</h2><blockquote>
<p>Written by Lee Kinyou, CS, CQUPT</p>
<p>Words written before the text:</p>
<p><em>This markdown document is a little note about Easy X functions that I wrote in my busy schedule. Although it is not very comprehensive, it basically includes commonly used functions. QAQ</em></p>
<p><em>Monday, June 20, 2022</em></p>
</blockquote>
<span id="more"></span>

<h3 id="一、基本绘图与文字输出"><a href="#一、基本绘图与文字输出" class="headerlink" title="一、基本绘图与文字输出"></a>一、基本绘图与文字输出</h3><h4 id="1-initgraph"><a href="#1-initgraph" class="headerlink" title="1.initgraph()"></a>1.initgraph()</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">initgraph</span>(<span class="type">int</span> width, <span class="type">int</span> height, <span class="type">int</span> flag = <span class="number">0</span>);</span><br><span class="line"><span class="comment">//绘制宽width，高height的窗口</span></span><br><span class="line"><span class="built_in">initgraph</span>(<span class="number">1024</span>, <span class="number">720</span>);<span class="comment">//只打开一个1024*720的绘图窗口</span></span><br><span class="line"><span class="built_in">initgraph</span>(<span class="number">1024</span>, <span class="number">720</span>, EW_SHOWCONSOLE);<span class="comment">//同时打开绘图窗口和控制台</span></span><br></pre></td></tr></table></figure>



<h4 id="2-cleardevice"><a href="#2-cleardevice" class="headerlink" title="2.cleardevice()"></a>2.cleardevice()</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cleardevice</span>();</span><br><span class="line"><span class="comment">//清空当前绘图窗口</span></span><br></pre></td></tr></table></figure>



<h4 id="3-setbkmode"><a href="#3-setbkmode" class="headerlink" title="3.setbkmode()"></a>3.setbkmode()</h4> <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setbkmode</span>(<span class="type">int</span> mode);</span><br><span class="line"><span class="comment">//调整绘图框背景模式</span></span><br><span class="line"><span class="built_in">setbkmode</span>(TRANSPARENT);<span class="comment">//将文本的背景调为透明，outtextxy()函数输出后文字背景会透明</span></span><br></pre></td></tr></table></figure>

<h4 id=""><a href="#" class="headerlink" title=""></a></h4><h4 id="4-setbkcolor"><a href="#4-setbkcolor" class="headerlink" title="4.setbkcolor()"></a>4.setbkcolor()</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setbkcolor</span>(COLORREF color);</span><br><span class="line"><span class="comment">//设置背景颜色，支持RGB(int RED, int GREEN, int BLUE) 每个颜色调色范围为0~255</span></span><br><span class="line"><span class="comment">//同时支持一些预设好的颜色如 RED、GREEN、BLUE、BLACK、WHITE、BLOWN等等</span></span><br><span class="line"><span class="built_in">setbkcolor</span>(RED);</span><br><span class="line"><span class="built_in">setbkcolor</span>(<span class="built_in">RGB</span>(<span class="number">50</span>, <span class="number">50</span>, <span class="number">50</span>));</span><br></pre></td></tr></table></figure>



<h4 id="5-circle-like"><a href="#5-circle-like" class="headerlink" title="5.circle() like"></a>5.circle() like</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">circle</span>(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> radius);<span class="comment">//在坐标为(x,y)处建立一个半径为radius的空心圆</span></span><br><span class="line"><span class="built_in">clearcircle</span>(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> radius);<span class="comment">//在坐标为(x,y)处删除一个半径为radius的空心圆</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">fillcircle</span>(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> radius);<span class="comment">//实心圆</span></span><br><span class="line"><span class="built_in">solidcircle</span>(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> radius);<span class="comment">//有其他颜色边线包裹的实心圆</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">fillrectangle</span>(<span class="type">int</span> left, <span class="type">int</span> top, <span class="type">int</span> right, <span class="type">int</span> bottom);<span class="comment">//确定矩阵的左上角和右下角，绘制矩阵</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//其他基本图形的绘制，请自行探索。QAQ</span></span><br></pre></td></tr></table></figure>



<h4 id="6-setlinecolor"><a href="#6-setlinecolor" class="headerlink" title="6.setlinecolor()"></a>6.setlinecolor()</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setlinecolor</span>(COLORREF color);<span class="comment">//设置线条颜色</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">setlinecolor</span>(GREEN);</span><br><span class="line"><span class="built_in">setlinecolor</span>(<span class="built_in">RGB</span>(<span class="number">10</span>, <span class="number">1</span>, <span class="number">10</span>));</span><br></pre></td></tr></table></figure>



<h4 id="7-setfillcolor"><a href="#7-setfillcolor" class="headerlink" title="7.setfillcolor()"></a>7.setfillcolor()</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setfillcolor</span>(COLORREF color); <span class="comment">//设置基本图形填充颜色</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">setfillcolor</span>(GREEN);</span><br><span class="line"><span class="built_in">setfillcolor</span>(<span class="built_in">RGB</span>(<span class="number">10</span>, <span class="number">1</span>, <span class="number">10</span>));</span><br></pre></td></tr></table></figure>



<h4 id="8-setlinestyle"><a href="#8-setlinestyle" class="headerlink" title="8.setlinestyle()"></a>8.setlinestyle()</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setlinestyle</span>(PS_SOLID, width); <span class="comment">//设置线条的格式为PS_SOLID和宽度为width</span></span><br></pre></td></tr></table></figure>



<h4 id="9-outtextxy"><a href="#9-outtextxy" class="headerlink" title="*9.outtextxy()"></a>*9.outtextxy()</h4><p>//（必须要看见啊QAQ）<strong>注: 所有成员必须修改字符集</strong></p>
<blockquote>
<p>路径为:</p>
<p>项目 -&gt;  属性 -&gt; 高级 -&gt;在字符集一栏   将   用Unicode 字符集   改为   <strong>使用多字节字符集</strong></p>
<p><strong>不修改会导致所有easy x 的库函数输出不了汉字</strong></p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">outtextxy</span>(<span class="type">int</span> x, <span class="type">int</span> y, TCHAR c);</span><br><span class="line"><span class="comment">//在(x,y)处绘制内容为c的文本</span></span><br><span class="line"><span class="built_in">outtextxy</span>(<span class="number">50</span>, <span class="number">50</span>, <span class="string">&quot;你寄吧谁啊？&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//将文本居中放在绘制的矩形框的方法:</span></span><br><span class="line">	<span class="built_in">setbkmode</span>(TRANSPARENT);<span class="comment">//使输出的文字取消背景</span></span><br><span class="line">	<span class="built_in">setfillcolor</span>(BROWN);</span><br><span class="line">	<span class="built_in">settextstyle</span>(<span class="number">20</span>, <span class="number">10</span>, <span class="string">&quot;宋体&quot;</span>);</span><br><span class="line">	<span class="built_in">fillroundrect</span>(x, y, x + w, y + h, <span class="number">10</span>, <span class="number">10</span>);<span class="comment">//输出一个矩阵</span></span><br><span class="line">	<span class="comment">//文字居中处理</span></span><br><span class="line">	<span class="type">int</span> tx = x + (w - <span class="built_in">textwidth</span>(TEXT)) / <span class="number">2</span>;</span><br><span class="line">	<span class="type">int</span> ty = y + (h - <span class="built_in">textheight</span>(TEXT)) / <span class="number">2</span>;</span><br><span class="line">	<span class="built_in">outtextxy</span>(tx, ty, TEXT);</span><br></pre></td></tr></table></figure>



<h4 id="10-settextstyle"><a href="#10-settextstyle" class="headerlink" title="10.settextstyle()"></a>10.settextstyle()</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">settextstyle</span>(<span class="type">int</span> width, <span class="type">int</span> height, TCHAR mode);</span><br><span class="line"><span class="comment">//将文本文字的宽设定为width，高设定为height，字体为mode</span></span><br><span class="line"><span class="built_in">settextstyle</span>(<span class="number">20</span>, <span class="number">20</span>, <span class="string">&quot;华文行楷&quot;</span>);</span><br></pre></td></tr></table></figure>



<h4 id="11-closegraph"><a href="#11-closegraph" class="headerlink" title="11.closegraph()"></a>11.closegraph()</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">closegraph</span>()<span class="comment">//关闭绘图窗口</span></span><br></pre></td></tr></table></figure>





<h3 id="二、图片输出"><a href="#二、图片输出" class="headerlink" title="二、图片输出"></a>二、图片输出</h3><h4 id="1-IMAGE"><a href="#1-IMAGE" class="headerlink" title="1.IMAGE"></a>1.IMAGE</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">IMAGE img;</span><br><span class="line"><span class="comment">//创建一个类型为图形的对象</span></span><br></pre></td></tr></table></figure>



<h4 id="2-loadimage"><a href="#2-loadimage" class="headerlink" title="2.loadimage()"></a>2.loadimage()</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">loadimage</span>(IMAGE *pDstImg, LPCTSTR pImgFile, <span class="type">int</span> nWidth = <span class="number">0</span>, <span class="type">int</span> nHeight = <span class="number">0</span>, <span class="type">bool</span> bResize = <span class="literal">false</span>);</span><br><span class="line"><span class="comment">// 从文件中加载图片 (bmp/gif/jpg/png/tif/emf/wmf/ico)</span></span><br><span class="line"><span class="comment">//  ./代表从当前文件夹读取文件， ../代表从上一文件夹读取文件</span></span><br><span class="line"><span class="comment">//绝对路径：C:\\Users\\lee\\source\\repos\\EasyX Learning\\DingzhenFace.png</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">loadimage</span>(&amp;img, <span class="string">&quot;./DingzhenFace.png&quot;</span>, <span class="number">50</span>, <span class="number">50</span>);</span><br></pre></td></tr></table></figure>



<h4 id="3-putimage"><a href="#3-putimage" class="headerlink" title="3.putimage()"></a>3.putimage()</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">putimage</span>(<span class="type">int</span> dstX, <span class="type">int</span> dstY, <span class="type">const</span> IMAGE *pSrcImg, DWORD dwRop = SRCCOPY);</span><br><span class="line"><span class="built_in">putimage</span>(<span class="type">int</span> dstX, <span class="type">int</span> dstY, <span class="type">int</span> dstWidth, <span class="type">int</span> dstHeight, <span class="type">const</span> IMAGE *pSrcImg, <span class="type">int</span> srcX, <span class="type">int</span> srcY, DWORD dwRop = SRCCOPY);</span><br><span class="line"><span class="comment">//打印加载好的图片</span></span><br><span class="line"><span class="built_in">putimage</span>(<span class="number">50</span>, <span class="number">50</span>, &amp;img);</span><br></pre></td></tr></table></figure>



<h3 id="三、鼠标读入"><a href="#三、鼠标读入" class="headerlink" title="三、鼠标读入"></a>三、鼠标读入</h3><h4 id="1-ExMessage"><a href="#1-ExMessage" class="headerlink" title="1. ExMessage"></a>1. ExMessage</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">ExMessage msg;<span class="comment">//定义一个消息变量</span></span><br><span class="line">msg=<span class="built_in">getmessage</span>(EM_MOUSE);</span><br><span class="line"><span class="comment">//获取鼠标消息</span></span><br><span class="line"><span class="comment">//但实际上不止有EM_MOUSE,还有其他的消息类型</span></span><br></pre></td></tr></table></figure>



<h4 id="2-PeekMessage"><a href="#2-PeekMessage" class="headerlink" title="2.PeekMessage()"></a>2.PeekMessage()</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">PeekMessage</span>(LPMSG lpMsg, HWND hWnd, UINT wMsgFilterMin, UINT wMsgFilterMax, UINT wRemoveMsg);</span><br><span class="line"><span class="comment">//返回值为bool</span></span><br><span class="line"><span class="comment">//使用方法如下</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">peekmessage</span>(&amp;msg, EM_MOUSE)) &#123;</span><br><span class="line">	<span class="keyword">switch</span> (msg.message)</span><br><span class="line">	&#123;</span><br><span class="line">	<span class="keyword">case</span> WM_LBUTTONDOWN:<span class="comment">//WM_LBUTTONDOWN 为左键</span></span><br><span class="line">		<span class="keyword">if</span> (msg.x &gt;= <span class="number">50</span> &amp;&amp; msg.x &lt;= <span class="number">200</span> &amp;&amp; msg.y &gt;= <span class="number">50</span> &amp;&amp; msg.y &lt;= <span class="number">100</span>) &#123;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;我是按钮，我被左键点击了！\n坐标为：&quot;</span> &lt;&lt; msg.x &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; msg.y &lt;&lt; endl;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> WM_RBUTTONDOWN:<span class="comment">//WM_LBUTTONDOWN 为右键</span></span><br><span class="line">		<span class="keyword">if</span> (msg.x &gt;= <span class="number">50</span> &amp;&amp; msg.x &lt;= <span class="number">200</span> &amp;&amp; msg.y &gt;= <span class="number">50</span> &amp;&amp; msg.y &lt;= <span class="number">100</span>) &#123;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;我是按钮，我被右键点击了！\n坐标为：&quot;</span> &lt;&lt; msg.x &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; msg.y &lt;&lt; endl;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="四、键盘读入"><a href="#四、键盘读入" class="headerlink" title="四、键盘读入"></a>四、键盘读入</h3><h3 id="1-include-lt-conio-h-gt"><a href="#1-include-lt-conio-h-gt" class="headerlink" title="1.#include&lt;conio.h&gt;"></a>1.#include&lt;conio.h&gt;</h3><blockquote>
<p>包含 _getch()函数</p>
</blockquote>
<h3 id="2-getch"><a href="#2-getch" class="headerlink" title="2._getch()"></a>2._getch()</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//用法如下：</span></span><br><span class="line"><span class="keyword">while</span> (TRUE) &#123;    </span><br><span class="line">    <span class="type">char</span> key = _getch();</span><br><span class="line">	<span class="keyword">switch</span> (key)</span><br><span class="line">	&#123;</span><br><span class="line">	<span class="keyword">case</span> <span class="string">&#x27;w&#x27;</span>:</span><br><span class="line">	<span class="keyword">case</span> <span class="string">&#x27;W&#x27;</span>:</span><br><span class="line">		pos_y -= Movingdistance;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;当前输入的键为：上键&quot;</span> &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">            </span><br><span class="line">	<span class="keyword">case</span> <span class="string">&#x27;s&#x27;</span>:</span><br><span class="line">	<span class="keyword">case</span> <span class="string">&#x27;S&#x27;</span>:</span><br><span class="line">		pos_y += Movingdistance;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;当前输入的键为：下键&quot;</span> &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">            </span><br><span class="line">	<span class="keyword">case</span> <span class="string">&#x27;a&#x27;</span>:</span><br><span class="line">	<span class="keyword">case</span> <span class="string">&#x27;A&#x27;</span>:</span><br><span class="line">		pos_x -= Movingdistance;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;当前输入的键为：左键&quot;</span> &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">            </span><br><span class="line">	<span class="keyword">case</span> <span class="string">&#x27;d&#x27;</span>:</span><br><span class="line">	<span class="keyword">case</span> <span class="string">&#x27;D&#x27;</span>:</span><br><span class="line">		pos_x += Movingdistance;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;当前输入的键为：右键&quot;</span> &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">case</span> <span class="string">&#x27;k&#x27;</span>:</span><br><span class="line">	<span class="keyword">case</span> <span class="string">&#x27;K&#x27;</span>:</span><br><span class="line">		pos_x += LongMovingdistance;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="五、音乐读入读出"><a href="#五、音乐读入读出" class="headerlink" title="五、音乐读入读出"></a>五、音乐读入读出</h3><h3 id="1-include-lt-mmsystem-h-gt"><a href="#1-include-lt-mmsystem-h-gt" class="headerlink" title="1.#include&lt;mmsystem.h&gt;"></a>1.#include&lt;mmsystem.h&gt;</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;mmsystem.h&gt; //包含多媒体设备接口头文件</span><br></pre></td></tr></table></figure>



<h3 id="2-pragma-comment-lib-”winmm-lib”"><a href="#2-pragma-comment-lib-”winmm-lib”" class="headerlink" title="2.#pragma comment(lib,”winmm.lib”)"></a>2.#pragma comment(lib,”winmm.lib”)</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(lib,<span class="string">&quot;winmm.lib&quot;</span>) </span></span><br><span class="line"><span class="comment">//加载静态库 支持MPEG,AVI,WAV,MP3格式</span></span><br></pre></td></tr></table></figure>



<h4 id="3-mciSendString"><a href="#3-mciSendString" class="headerlink" title="3.mciSendString()"></a>3.mciSendString()</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//打开音乐 播放音乐 alias 取别名 repeat 重复播放</span></span><br><span class="line"><span class="built_in">mciSendString</span>(<span class="string">&quot;open ./孤勇者.mp3&quot;</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">mciSendString</span>(<span class="string">&quot;play ./孤勇者.mp3&quot;</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//或者</span></span><br><span class="line"><span class="comment">//mciSendString(&quot;open ./孤勇者.mp3 alias BGM&quot;, 0, 0, 0);</span></span><br><span class="line"><span class="comment">//mciSendString(&quot;play BGM repeat&quot;, 0, 0, 0);</span></span><br></pre></td></tr></table></figure>



<h3 id="六、弹窗"><a href="#六、弹窗" class="headerlink" title="六、弹窗"></a>六、弹窗</h3><h4 id="1-HWND"><a href="#1-HWND" class="headerlink" title="1.HWND"></a>1.HWND</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">HWND hnd;</span><br><span class="line">hnd = <span class="built_in">GetHWnd</span>();</span><br><span class="line"><span class="comment">//设置窗口标题</span></span><br></pre></td></tr></table></figure>



<h4 id="2-SetWindowText"><a href="#2-SetWindowText" class="headerlink" title="2.SetWindowText()"></a>2.SetWindowText()</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">SetWindowText</span>(hnd, TEXT);</span><br><span class="line"><span class="comment">//设置窗口为名称为TEXT</span></span><br></pre></td></tr></table></figure>



<h4 id="3-MessageBox"><a href="#3-MessageBox" class="headerlink" title="3.MessageBox()"></a>3.MessageBox()</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">MessageBox</span>(hnd, <span class="string">&quot;你寄吧谁啊？&quot;</span>, <span class="string">&quot;提示&quot;</span>, MB_OKCANCEL);</span><br><span class="line"><span class="comment">//弹出的窗口的标题为“提示”，内容为“你寄吧谁啊？”，有确定和取消键</span></span><br><span class="line"><span class="comment">//MessageBox()的返回值为bool</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//例如：</span></span><br><span class="line">    HWND hnd = <span class="built_in">GetHWnd</span>();</span><br><span class="line">	<span class="comment">//设置窗口标题</span></span><br><span class="line">	<span class="built_in">SetWindowText</span>(hnd, <span class="string">&quot;鼠鼠我呀，头发要掉光了。&quot;</span>);</span><br><span class="line">	<span class="comment">//弹出窗口，提示用户操作</span></span><br><span class="line">	<span class="type">int</span> isok = <span class="built_in">MessageBox</span>(hnd, <span class="string">&quot;你寄吧谁啊？&quot;</span>, <span class="string">&quot;提示&quot;</span>, MB_OKCANCEL);</span><br><span class="line">	<span class="built_in">settextstyle</span>(<span class="number">500</span>, <span class="number">100</span>, <span class="string">&quot;华文行楷&quot;</span>);</span><br><span class="line">	<span class="built_in">settextcolor</span>(<span class="built_in">RGB</span>(<span class="number">100</span>, <span class="number">120</span>, <span class="number">130</span>));</span><br><span class="line">	<span class="keyword">if</span> (isok == IDOK) &#123;</span><br><span class="line">		<span class="built_in">outtextxy</span>(<span class="number">100</span>, <span class="number">100</span>, <span class="string">&quot;正确的&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (isok == IDCANCEL) &#123;</span><br><span class="line">		<span class="built_in">outtextxy</span>(<span class="number">100</span>, <span class="number">100</span>, <span class="string">&quot;sabbly&quot;</span>);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>







































]]></content>
      <categories>
        <category>杂项</category>
      </categories>
      <tags>
        <tag>EasyX</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2022/08/31/hello-world/</url>
    <content><![CDATA[<blockquote>
<p>This article is written by Hexo, not by Kinyou.</p>
</blockquote>
<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<span id="more"></span>

<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <categories>
        <category>杂项</category>
      </categories>
      <tags>
        <tag>梦开始的地方</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构期末复习</title>
    <url>/2022/08/31/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<h1 id="数据结构期末复习"><a href="#数据结构期末复习" class="headerlink" title="数据结构期末复习"></a>数据结构期末复习</h1><h2 id="1、基本概念和术语"><a href="#1、基本概念和术语" class="headerlink" title="1、基本概念和术语"></a>1、基本概念和术语</h2><p>数据：数据是对客观事物的符号表示，在计算机科学中指所有能输入到计算机中并且被计算机程序处理的符号的总称。</p>
<p>数据元素：数据元素是数据的基本单位。</p>
<p>数据对象：是性质相同的数据元素的集合。</p>
<p>数据结构：是相互之间存在一种或者多种特定关系的数据元素的集合。</p>
<p>结构：集合，线性结构，树形结构，图状结构，网状结构。</p>
<span id="more"></span>

<h2 id="2、算法"><a href="#2、算法" class="headerlink" title="2、算法"></a>2、算法</h2><p><strong>特性</strong>：<br>有穷性，确定性，可行性，输入和输出。<br><strong>要求</strong>：<br>正确性，可读性，健壮性，效率与低存储量需求。</p>
<p>如何动态分配空间：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">L=(<span class="type">int</span> *)<span class="built_in">malloc</span>(<span class="number">100</span>*<span class="built_in">sizeof</span>(<span class="type">int</span>)); <span class="comment">//申请100个int型的数据，返回一个int型的指针赋给L。</span></span><br><span class="line">L=(<span class="type">int</span> *)<span class="built_in">realloc</span>(L,<span class="number">100</span>*<span class="built_in">sizeof</span>(<span class="type">int</span>));<span class="comment">//重新分配100个内存给L，可能之前分配的不够</span></span><br></pre></td></tr></table></figure>

<h2 id="3、各章节内容"><a href="#3、各章节内容" class="headerlink" title="3、各章节内容"></a>3、各章节内容</h2><h3 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h3><blockquote>
<p>线性表主要分为顺序表（SqList),单链表（LinkList)，双链表（DuList)，循环链表。</p>
</blockquote>
<p>这个定义是顺序表的定义。主要是有三个变量，分别用来存放数据值，数据个数，表长。顺序表，顾名思义，就是表里面数据的各个元素的位置关系是相邻关系，一个紧挨一个，取元素可以直接通过下标进行定位。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">Sqlist</span>&#123;</span><br><span class="line">	ElemType *elem;  <span class="comment">//数据值，是一个数组元素的首地址 </span></span><br><span class="line">	<span class="type">int</span> length;  <span class="comment">//顺序表目前存储的元素的个数</span></span><br><span class="line">	<span class="type">int</span> listsize; <span class="comment">//顺序表的长度，也就是该顺序表可以最多存放几个元素</span></span><br><span class="line">&#125;SqList;</span><br></pre></td></tr></table></figure>



<p>这个是单链表的定义，对于链式存储的结构，不同于顺序表，链式结构的最小单元是结点，并不要求结点之间是相邻的，注意，这个相邻，指的是内存的相邻，顺序表的相邻指的是内存的相邻，因此可以用下标进行定义，但是单链表不是这样的，单链表的内存不一定是相邻的，所以要定位某一个具体的结点，就只能从头结点进行遍历。这里，单链表又分为有头结点和没有头结点的，这个看题目具体的要求。我们查找某一个元素的时候，是通过从最开始的那个结点进行遍历，然后再执行相关的操作。</p>
<p>循环链表就不再进行详细解释了，顾名思义，就是我们普通链表的最后一个结点的next是指向NULL的，而循环链表的最后一个结点指向的是链表的头节点。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">LNode</span>&#123;</span><br><span class="line">	ElemType data;  <span class="comment">//数据元素</span></span><br><span class="line">	<span class="keyword">struct</span> <span class="title class_">LNode</span> *next;   <span class="comment">//该结点的下一个结点，也叫结构指针</span></span><br><span class="line">&#125;LNode;</span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">DuList</span>&#123;</span><br><span class="line">	ElemType data;</span><br><span class="line">	<span class="keyword">struct</span> <span class="title class_">DuList</span> *next;   <span class="comment">//前驱结点</span></span><br><span class="line">	<span class="keyword">struct</span> <span class="title class_">DuList</span> *prior;  <span class="comment">//后继结点</span></span><br><span class="line">&#125;DuList;</span><br></pre></td></tr></table></figure>

<p>双向链表，是从普通链表扩展出来的一种链表，就是我们链表的每一个结点，不仅只有指向该节点后面的结点指针，还有就是指向该结点前一个结点的前驱指针。对于单链表，我们如果想删除某一个结点的话，那么我们后面的结点就要纷纷往前移动一个单位。但是，如果我们要执行很多个操作的时候，也就是我们要进行移动指针的操作是很多的，对于数据量很庞大的链表，这是不可取的，所以我们就想一个结构，可以是移动的操作尽可能地少，并且保持链表的结点的相对位置不变。所以，我们就想到了双链表结构，我们对于删除操作的时候，我们只需要找到要删除的结点。然后让这个结点的前驱结点的后继指向这个结点的车后继。让这个结点的后继结点指向这个结点的前驱结点。这样说可能很绕。我给出一个图来吧。</p>
<p>大概的结构就是这样，代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">p-&gt;prior-&gt;next=p-&gt;next;</span><br><span class="line">p-&gt;next-&gt;prior=p-&gt;prior;</span><br></pre></td></tr></table></figure>



<p>其实，对于单链表也不是不可以进行这样的删除操作，我们可以用一个单独的结点记录遍历的某一个结点的前驱结点。然后，一旦找到该结点，我们就将它的前一个结点的后继结点修改为该结点的后继结点。这样说感觉很绕，一开始学就这样，理解不了的话自己在纸上多模拟即可。</p>
<h3 id="队列和栈"><a href="#队列和栈" class="headerlink" title="队列和栈"></a>队列和栈</h3><p>栈，栈是一种十分常见的一种数据结构，它的规律是先进后出的一种结构，这个结构，可以比喻为一个箱子，我们可以将一本一本书放进这个箱子，但是我们拿出来的时候，我们只能拿最上面的那一本书。<br>顺序栈</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//顺序栈的结构定义</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</span><br><span class="line">	SElemType *base;  <span class="comment">//栈底 </span></span><br><span class="line">	SElemType data; <span class="comment">//数据值</span></span><br><span class="line">	SElemType *top;  <span class="comment">//栈顶 </span></span><br><span class="line">	<span class="type">int</span> stacksize;  <span class="comment">//栈大小 </span></span><br><span class="line">&#125;SqStack;</span><br></pre></td></tr></table></figure>



<p>顺序栈有栈顶和栈底，当我们有一个新的元素插入栈里面的时候，top指针++，当有元素从栈里面清除的时候，我们的base++。栈的应用主要是后面的二叉树的遍历和图的遍历的相关的操作。<br>然后就是队列，队列是一种先进先出的结构，就像我们日常生活中排队一样，先来的，优先级肯定是更高的，所以对于一些操作它也是要优先进行的。</p>
<p>队列</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//链队列的结构定义</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">QNode</span>&#123;</span><br><span class="line">	QElemType data;</span><br><span class="line">	<span class="keyword">struct</span> <span class="title class_">QNode</span> *next;</span><br><span class="line">&#125;QNode,*QueuePtr;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</span><br><span class="line">	QueuePtr *next;</span><br><span class="line">	QueuePtr *rear;</span><br><span class="line">&#125;LinkQueue;</span><br></pre></td></tr></table></figure>

<p>循环队列：和顺序栈类似的是，对于循环队列，我们一样有两个指针front和rear，这两个指针一开始都指向0的，当我们往队列里面添加元素的时候，rear指针自增1，当从链表里面删除元素的时候，我们的front r指针就自增1，这样下来，我们就会遇到一个问题，我们怎么判断此时队列里面是否满的情况，因为在队列满的时候，我们是不能进行入队的操作的。显然， 我们不能用front和rear相等的条件进行判断了。解决这个问题，我们主要有两种方法：<br>1、我们空出一个空间不进行任何使用，当我们的对位指针的下一个位置是队首指针的时候，我们此时的队列就是满的情况了。<br>2、我们新增一个tag标志位，当我们的rear自增1后达到了front的位置时，我们就可以判断此时的队列是满的情况。当我们的rear自增1达到了front的时候，我们的tag标志位就记为1，说明此时队列是满的情况；反之，当我们的front+1达到了tag的时候，我们的tag的标志就记为0。这样下来，我们入队操作的时候，可以先查看tag位的数值情况，然后就可以判断操作是否合法了。<br>对于无法判断队列的长度的情况，我们推荐使用链队列实现动态处理。</p>
<h3 id="树"><a href="#树" class="headerlink" title="树"></a>树</h3><h4 id=""><a href="#" class="headerlink" title=""></a><img src="https://img-blog.csdnimg.cn/20210222102217926.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1JlYWxfRm9vbF8=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></h4><h4 id="树和二叉树"><a href="#树和二叉树" class="headerlink" title="树和二叉树"></a>树和二叉树</h4><p>树是数据结构中十分重要的一个模块，树是后面学的图的一种特殊的形式。树的一些基本的概念我就不仔细介绍了。我就置介绍一些二叉树的性质。</p>
<p><strong>性质1 在二叉树的第i层上至多有2^(i-1)个结点，每一层结点的个数依次为1,2,4,…</strong><br><strong>性质2 深度为k的二叉树至多有2^k-1个结点，对于一个完全二叉树，前i层的结点的个数依次为1,3,7,…</strong><br><strong>性质3 对任何一棵二叉树T，如果其终端的结点个数为n0,度为2的结点的个数为n2，则n0=n2+1.</strong></p>
<blockquote>
<p>假设n1为度为1的结点的个数，则图中结点的总的个数为n=n1+n0+n2.对于一棵树，</p>
<p>每一条分支出来对应于一个结点，当然，根节点不是由某一个分支出来的，结果为n=n1+2n2+1,</p>
<p>###两个方程联立可以得到n0=n2+1。</p>
</blockquote>
<p><strong>性质4 具有n个结点的完全二叉树的深度为log2n（向下取整)+1.</strong><br>二叉树的存储结构有顺序存储和链式存储两种结构，个人倾向于后一种，灵活性更高，也更加直观。</p>
<p><strong>二叉树的遍历</strong><br>先序遍历， 根节点-&gt;左子树-&gt;右子树<br>中序遍历，左子树-&gt;根节点-&gt;右子树<br>后序遍历，左子树-&gt;右子树-&gt;根节点<br>层序遍历，第一层-&gt;第二层-&gt;第三层<br>我们可以发现，其实这个先后中，其实是对根节点而言的。所以可以凭借这个进行记忆。<br>但是，这里有一个用栈模拟的中序遍历还是比较值得记忆的，在一些企业的招聘面试也经常被问及。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">Status <span class="title">InOrderTraverse</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">InitStack</span>(S);<span class="built_in">Push</span>(S,T);</span><br><span class="line">	<span class="keyword">while</span>(!<span class="built_in">StackEmpty</span>(S)) &#123;</span><br><span class="line">		<span class="keyword">while</span>(<span class="built_in">Gettop</span>(S)&amp;&amp;p) <span class="built_in">Push</span>(S,p-&gt;lchild);  <span class="comment">//向左走到尽头 </span></span><br><span class="line">		<span class="built_in">Pop</span>(S,p); <span class="comment">//空指针退栈 </span></span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">StackEmpty</span>(S))&#123;</span><br><span class="line">			<span class="built_in">Pop</span>(S,p); <span class="built_in">Visit</span>(p-&gt;data);  <span class="comment">//访问这个结点的数据 </span></span><br><span class="line">			<span class="built_in">Push</span>(S,p-&gt;rchild);  <span class="comment">//将右结点入栈 </span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>



<h4 id="哈夫曼树"><a href="#哈夫曼树" class="headerlink" title="哈夫曼树"></a>哈夫曼树</h4><p>哈夫曼树也叫做最优二叉树，构造一棵最优二叉树的方法是每次选取集合里面最小的两个数字合并成一个新的结点，最终就可以构造出一棵最优二叉树了。在算法竞赛里面，可以使用优先队列来进行处理，产生一棵最优二叉树。</p>
<p>图<br>图有几个概念还是比较重要的，比如什么是强连通分量，什么是强连通图等等。<br>图，可以说是数据结构最最重要的一个模块。但是我感觉学校老师在有限的时间里面很难讲清楚这个模块，所以，想学好的建议自己去刷题提升。<br>图的存储<br>我们知道图的存储主要有四种结构，邻接矩阵，邻接表，十字链表和邻接多重表这四种结构。<br>图的遍历<br>图的遍历主要深度优先遍历和广度优先遍历两种方式，深度优先遍历类似于我们对二叉树的线序遍历，广度优先遍历类似于我们学习的层序遍历。这里广度优先遍历可以用一个队列来进行模拟操作。<br>至于一些最小生成树，拓扑排序，最短路径算法，个人觉得考试应该不会考这些，主要是难度有点大。</p>
<p>查找<br>概念：<br>查找表是由同一类的数据元素构成的集合。<br>对表进行不更改的操作叫做静态查找，而加入要修改元素，位置，信息等的操作叫做动态查找。<br>关键字是数据元素中某一个数组项的值。<br>至于一些查找方法就不再介绍了，这里主要介绍一个概念，叫做平均查找长度。<br>平均查找长度：为确定记录在查找表中的位置，需和给定值进行比较的关键字个数的期望值称为查找算法在查找成功是的平均查找长度。</p>
<h3 id="图"><a href="#图" class="headerlink" title="图"></a>图</h3><p><img src="https://img-blog.csdnimg.cn/20210226170339905.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1JlYWxfRm9vbF8=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<h4 id="图的相关概念"><a href="#图的相关概念" class="headerlink" title="图的相关概念"></a>图的相关概念</h4><p><strong>1、有向图</strong><br>若E是有向边(也称弧)的有限集合时，则图G为有向图。弧是顶点的有序对，记为&lt;v, w&gt;，其中v,w是顶点，v称为弧尾，w称为弧头，&lt;v,w&gt;称为从顶点v到顶点w的弧，也称v邻接到w，或w邻接自v。</p>
<p><strong>2、无向图</strong><br>若E是无向边(简称边)的有限集合时，则图G为无向图。边是顶点的无序对，记为(v, w)或(w,v),因为(v,w)=(w,v), 其中v,w是顶点。可以说顶点w和顶点v互为邻接点。边(v, w)依附于顶点w和v，或者说边(v, w)和顶点v, w相关联。</p>
<p>3、简单图<br>一个图G 若满足:①不存在重复边;②不存在顶点到自身的边，则称图G 为简单图。</p>
<p>4、多重图<br>若图G 中某两个结点之间的边数多于一条，又允许顶点通过同一条边和自己关联，则G 为多重图。多重图的定义和简单图是相对的。</p>
<p><strong>5、完全图（也称简单完全图）</strong><br>对于无向图，∣ E ∣ 的取值范围是0 到n ( n − 1 ) / 2 ，有n ( n − 1 ) / 2 条边的无向图称为完全图，在完全图中任意两个顶点之间都存在边。对于有向图，∣ E ∣ 的取值范围是0 到n ( n − 1 ) ，有n ( n − 1 ) 条弧的有向图称为有向完全图，在有向完全图中任意两个顶点之间都存在方向相反的两条弧。</p>
<p>6、子图<br>易知</p>
<p>注意:并非V和E的任何子集都能构成G的子图，因为这样的子集可能不是图，即E的子集中的某些边关联的顶点可能不在这个V的子集中。</p>
<p><strong>7、连通、连通图和连通分量</strong><br>在无向图中，若从顶点v 到顶点w 有路径存在，则称v 和w 是连通的。若图G 中任意两个顶点都是连通的，则称图G 为连通图，否则称为非连通图。无向图中的极大连通子图称为连通分量。若一个图有n 个顶点，并且边数小于n − 1，则此图必是非连通图。</p>
<blockquote>
<p>注意:弄清连通、连通图、连通分量的概念非常重要。首先要区分极大连通子图和极小连通子图，极大连通子图是无向图的连通分量，极大即要求该连通子图包含其所有的边;极小连通子图是既要保持图连通又要使得边数最少的子图。</p>
</blockquote>
<p><strong>8、强连通图、强连通分量</strong><br>在有向图中，若从顶点v 到顶点w 和从顶点w 到项点v 之间都有路径,则称这两个顶点是强连通的。若图中任何一对顶点都是强连通的，则称此图为强连通图。有向图中的极大强连通子图称为有向图的强连通分量。</p>
<blockquote>
<p>注意:强连通图、强连通分量只是针对有向图而言的。一般在无向图中讨论连通性，在有向图中考虑强连通性。</p>
</blockquote>
<p>9、生成树、生成森林<br>连通图的生成树是包含图中全部顶点的一个极小连通子图。若图中顶点数为n ,则它的生成树含有n − 1 条边。对生成树而言，若砍去它的一条边，则会变成非连通图，若加上一条边则会形成一个回路。在非连通图中，连通分量的生成树构成了非连通图的生成森林。</p>
<blockquote>
<p>注意:包含无向图中全部顶点的极小连通子图，只有生成树满足条件，因为砍去生成树的任一条边，图将不再连通。</p>
</blockquote>
<p><strong>10、顶点的度、入度和出度</strong></p>
<p>度：点相连边数</p>
<p>入度：指向该点的边数</p>
<p>出度：从该点射出的边数</p>
<p>有向图的全部顶点的入度之和与出度之和相等，并且等于边数。这是因为每条有向边都有一个起点和终点。</p>
<p>11、边的权和网<br>在一个图中，每条边都可以标上具有某种含义的数值，该数值称为该边的权值。这种边上带有权值的图称为带权图，也称网。</p>
<p>12、稠密图、稀疏图<br>边数很少的图称为稀疏图，反之称为稠密图。稀疏和稠密本身是模糊的概念，稀疏图和稠密图常常是相对而言的。一般当图G满足∣ E ∣ &lt; ∣ V ∣ 时，可以将G 视为稀疏图。</p>
<p>13、路径、路径长度和回路<br>懒得解释了，懂得都懂</p>
<p>14、 简单路径、简单回路<br>在路径序列中，顶点不重复出现的路径称为简单路径。除第一个顶点和最后一个顶点外，其余顶点不重复出现的回路称为简单回路。</p>
<p>15、距离<br>从顶点u 出发到顶点v 的最短路径若存在，则此路径的长度称为从u 到v 的距离。若从u 到v 根本不存在路径，则记该距离为无穷( ∞ ) 。</p>
<p>16、有向树<br>一个顶点的入度为0、其余顶点的入度均为1的有向图，称为有向树。</p>
<h4 id="图的存储结构"><a href="#图的存储结构" class="headerlink" title="图的存储结构"></a>图的存储结构</h4><p>一、邻接矩阵<br>图的邻接矩阵(Adjacency Matrix) 存储方式是用两个数组来表示图。一个一维数组存储图中顶点信息，一个二维数组(称为邻接矩阵)存储图中的边或弧的信息。<br>设图G 有n 个顶点，则邻接矩阵A AA是一个n ∗ n 的方阵，定义为:</p>
<h4 id="-1"><a href="#-1" class="headerlink" title=""></a><img src="https://img-blog.csdnimg.cn/20210301095908432.png#pic_center" alt="在这里插入图片描述"></h4><p><img src="https://img-blog.csdnimg.cn/202103011006555.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1JlYWxfRm9vbF8=,size_16,color_FFFFFF,t_70#pic_center" alt="img"></p>
<h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3><h4 id="直接查找"><a href="#直接查找" class="headerlink" title="直接查找"></a>直接查找</h4><p>略</p>
<h4 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h4><p>略</p>
<h4 id="动态查找"><a href="#动态查找" class="headerlink" title="动态查找"></a>动态查找</h4><p>动态查找表主要分为二叉排序树和平衡二叉树。<br>二叉排序树： 对于每一个结点，该节点的左子树上的值均小根结点的值，该结点右子树上的值均大于根结点的值。根据这个特性，我们发现，只要对二叉排序树进行一个先序遍历即可实现一个有序的序列了。二叉排序树的时间复杂度和折半查找的时间复杂度是类似的。注意的是二叉排序树并不是唯一的，树的高度可能影响查找的效率，所以我们接下来介绍的平衡二叉树就可以很好的降低树的高度。<br>平衡二叉树：平衡二叉树又称AVL树，它的性质主要是该二叉树的左右子树的深度之差不会超过1，平衡因子指的是该结点的左子树减去该节点的右子树，所以我们可以知道，平衡因子可能为1，0，-1这三个值。</p>
<h4 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h4><p>构造一个哈希函数进行存储</p>
<blockquote>
<p>对于不同的关键字可能得到同一个哈希地址。这种现象叫做冲突。具有相同函数值的关键字对该哈希函数来说称作同义词。然而，我们在构造哈希函数的时候，应该尽可能地减少冲突，但是却不能完全避免。<br>将一组关键字映像到一个有的连续的地址上，并以关键字在地址集中的像作为记录在表中的存储位置，这种表叫做哈希表。这一映像过程叫做哈希造表或者散列。所得的存储位置称做哈希地址或者散列地址</p>
</blockquote>
<p><strong>哈希函数的构造方法:</strong><br>1、直接定址法 取关键字或者关键字的某一个线性函数值为哈希地址，即：H（key)=key或者H(key)=akey+b<br>2、数字分析法 假设关键字是以r为基的数，并且哈希表中可能出现的关键字都是事先知道的，则可取关键字的若干数位组成哈希地址。<br>3、平方取中法 取关键字平方后的中间几位为哈希地址。<br>4、折叠法 将关键字分割为位数相同的及部分，然后取这几部分的叠加和作为哈希地址。<br>5、除留余数法 取关键字被某一个不大于哈希表长m的数p出后所得的余数为哈希地址。对于这个数p，可以选择子树或者不包含小于20的质因数的合数。<br>6、随机数法 选择一个随机函数，取关键字的随机函数值为它的哈希地址。</p>
<p><strong>哈希函数要考虑的因素：</strong><br>1、计算哈希函数所需要的时间<br>2、关键字的长度<br>3、哈希表的大小<br>4、关键字的分布情况<br>5、记录的查找频率</p>
<p><strong>处理冲突的方法</strong><br>1、开放地址法<br>2、再哈希法<br>3、链地址法<br>4、建立一个公共溢出区</p>
<p>哈希表的查找过程中需和给定值进行比较的关键字的个数取决于三个因素：哈希函数，处理冲突的方法和哈希表的装填因子。其中，装填因子的定义为：a=表中填入的记录数/哈希表的长度。</p>
<h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><p><img src="https://img-blog.csdnimg.cn/20210522134327765.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81Njc3MjkwNA==,size_16,color_FFFFFF,t_70" alt="img"></p>
<h4 id="1-插入排序"><a href="#1-插入排序" class="headerlink" title="1.插入排序"></a>1.插入排序</h4><blockquote>
<p>思路：<br>  在待排序的元素中，假设前n-1个元素已有序，现将第n个元素插入到前面已经排好的序列中，使得前n个元素有序。按照此法对所有元素进行插入，直到整个序列有序。<br>  但我们并不能确定待排元素中究竟哪一部分是有序的，所以我们一开始只能认为第一个元素是有序的，依次将其后面的元素插入到这个有序序列中来，直到整个序列有序为止。</p>
</blockquote>
<p>代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">InsertSort</span><span class="params">(<span class="type">int</span>* arr, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">		<span class="comment">//记录有序序列最后一个元素的下标</span></span><br><span class="line">		<span class="type">int</span> end = i;</span><br><span class="line">		<span class="comment">//待插入的元素</span></span><br><span class="line">		<span class="type">int</span> tem = arr[end + <span class="number">1</span>];</span><br><span class="line">		<span class="comment">//单趟排</span></span><br><span class="line">		<span class="keyword">while</span> (end &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">			<span class="comment">//比插入的数大就向后移</span></span><br><span class="line">			<span class="keyword">if</span> (tem &lt; arr[end]) &#123;</span><br><span class="line">				arr[end + <span class="number">1</span>] = arr[end];</span><br><span class="line">				end--;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">//比插入的数小，跳出循环</span></span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//tem放到比插入的数小的数的后面</span></span><br><span class="line">		arr[end  + <span class="number">1</span>] = tem;</span><br><span class="line">        arr[end  + <span class="number">1</span>] = tem;</span><br><span class="line">		<span class="comment">//代码执行到此位置有两种情况:</span></span><br><span class="line">		<span class="comment">//1.待插入元素找到应插入位置（break跳出循环到此）</span></span><br><span class="line">		<span class="comment">//2.待插入元素比当前有序序列中的所有元素都小（while循环结束后到此）</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>时间复杂度：最坏情况下为O(N*N)，此时待排序列为逆序，或者说接近逆序<br>      最好情况下为O(N)，此时待排序列为升序，或者说接近升序。<br>空间复杂度：O(1)</strong></p>
</blockquote>
<h4 id="2-希尔排序"><a href="#2-希尔排序" class="headerlink" title="2.希尔排序"></a>2.希尔排序</h4><blockquote>
<p>步骤：<br>1.先选定一个小于N的整数gap作为第一增量，然后将所有距离为gap的元素分在同一组，并对每一组的元素进行直接插入排序。然后再取一个比第一增量小的整数作为第二增量，重复上述操作…<br>2.当增量的大小减到1时，就相当于整个序列被分到一组，进行一次直接插入排序，排序完成。<br>动图如下：</p>
</blockquote>
<blockquote>
<p>思路：<br>希尔排序，先将待排序列进行预排序，使待排序列接近有序，然后再对该序列进行一次插入排序，此时插入排序的时间复杂度为O(N)，</p>
</blockquote>
<p>代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">ShellSort</span><span class="params">(<span class="type">int</span>* arr, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> gap = n;</span><br><span class="line">	<span class="keyword">while</span> (gap&gt;<span class="number">1</span>) &#123;</span><br><span class="line">		<span class="comment">//每次对gap折半操作</span></span><br><span class="line">		gap = gap / <span class="number">2</span>;</span><br><span class="line">		<span class="comment">//单趟排序</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n - gap; ++i) &#123;</span><br><span class="line">			<span class="type">int</span> end = i;</span><br><span class="line">			<span class="type">int</span> tem = arr[end + gap];</span><br><span class="line">			<span class="keyword">while</span> (end &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">				<span class="keyword">if</span> (tem &lt; arr[end]) &#123;</span><br><span class="line">					arr[end + gap] = arr[end];</span><br><span class="line">					end -= gap;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			arr[end + gap] = tem;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>时间复杂度平均：O(N^1.3)<br>空间复杂度：O(1)</strong></p>
</blockquote>
<h4 id="3-选择排序"><a href="#3-选择排序" class="headerlink" title="3.选择排序"></a>3.选择排序</h4><blockquote>
<p>思路：<br>每次从待排序列中选出一个最小值，然后放在序列的起始位置，直到全部待排数据排完即可。<br>实际上，我们可以一趟选出两个值，一个最大值一个最小值，然后将其放在序列开头和末尾，这样可以使选择排序的效率快一倍。</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">swap</span><span class="params">(<span class="type">int</span>* a, <span class="type">int</span>* b)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> tem = *a;</span><br><span class="line">	*a = *b;</span><br><span class="line">	*b = tem;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SelectSort</span><span class="params">(<span class="type">int</span>* arr, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">	<span class="comment">//保存参与单趟排序的第一个数和最后一个数的下标</span></span><br><span class="line">	<span class="type">int</span> begin = <span class="number">0</span>, end = n - <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span> (begin &lt; end) &#123;</span><br><span class="line">		<span class="comment">//保存最大值的下标</span></span><br><span class="line">		<span class="type">int</span> maxi = begin;</span><br><span class="line">		<span class="comment">//保存最小值的下标</span></span><br><span class="line">		<span class="type">int</span> mini = begin;</span><br><span class="line">		<span class="comment">//找出最大值和最小值的下标</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = begin; i &lt;= end; ++i) &#123;</span><br><span class="line">			<span class="keyword">if</span> (arr[i] &lt; arr[mini]) mini = i;</span><br><span class="line">			<span class="keyword">if</span> (arr[i] &gt; arr[maxi]) maxi = i;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//最小值放在序列开头</span></span><br><span class="line">		<span class="built_in">swap</span>(&amp;arr[mini], &amp;arr[begin]);</span><br><span class="line">		<span class="comment">//防止最大的数在begin位置被换走</span></span><br><span class="line">		<span class="keyword">if</span> (begin == maxi) maxi = mini;</span><br><span class="line">		<span class="comment">//最大值放在序列结尾</span></span><br><span class="line">		<span class="built_in">swap</span>(&amp;arr[maxi], &amp;arr[end]);</span><br><span class="line">		++begin;</span><br><span class="line">		--end;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>时间复杂度：最坏情况：O(N^2)<br>      最好情况：O(N^2)<br>空间复杂度：O(1)</strong></p>
</blockquote>
<h4 id="4-冒泡排序"><a href="#4-冒泡排序" class="headerlink" title="4.冒泡排序"></a>4.冒泡排序</h4><blockquote>
<p>思路：<br>左边大于右边交换一趟排下来最大的在右边</p>
</blockquote>
<p>代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">BubbleSort</span><span class="params">(<span class="type">int</span>* arr, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> end = n;</span><br><span class="line">	<span class="keyword">while</span> (end) &#123;</span><br><span class="line">		<span class="type">int</span> flag = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; end; ++i) &#123;</span><br><span class="line">			<span class="keyword">if</span> (arr[i - <span class="number">1</span>] &gt; arr[i]) &#123;</span><br><span class="line">				<span class="type">int</span> tem = arr[i];</span><br><span class="line">				arr[i] = arr[i - <span class="number">1</span>];</span><br><span class="line">				arr[i - <span class="number">1</span>] = tem;</span><br><span class="line">				flag = <span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (flag == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">		--end;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>时间复杂度：最坏情况：O(N^2)<br>      最好情况：O(N)<br>空间复杂度：O(1)</strong></p>
</blockquote>
<h4 id="5-堆排序"><a href="#5-堆排序" class="headerlink" title="5.堆排序"></a>5.堆排序</h4><p>1.堆</p>
<blockquote>
<p>大根堆：所有父节点大于等于孩子节点</p>
<p>小根堆：所有父节点小于等于孩子节点</p>
</blockquote>
<p>堆的性质：</p>
<blockquote>
<p>• 堆中某个节点的值总是不大于或不小于其父节点的值</p>
<p>• 堆总是一棵完全二叉树</p>
</blockquote>
<p>2.堆的实现</p>
<blockquote>
<p>现在我们给出一个数组，逻辑上看做一颗完全二叉树。我们通过从根节点开始的向下调整算法可以把它调整成一个小堆。<br>int a[] = {27,15,19,18,28,34,65,49,25,37};</p>
<p>2.1堆的向下调整算法(建小堆)<br>向下调整算法-前提：当前树的左右子树必须都是一个小堆<br>向下调整算法的核心思想：选出左右孩子中小的哪一个，跟父亲交换，小的往上浮，大的往下沉，如果要建大堆则相反</p>
<p>如下图所示为一个向下调整法调小堆</p>
<p>2.2 堆向下调整算法(建小堆)实现<br>//堆向下调整算法<br>//建小堆</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">AdjustDown</span><span class="params">(<span class="type">int</span>* a, <span class="type">int</span> n, <span class="type">int</span> root)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> parent = root;</span><br><span class="line">	<span class="type">int</span> child = parent * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">	<span class="comment">//孩子超过数组下标结束</span></span><br><span class="line">	<span class="keyword">while</span> (child &lt; n) &#123;</span><br><span class="line">		<span class="comment">//child始终左右孩子中小的那个</span></span><br><span class="line">		<span class="keyword">if</span> (a[child + <span class="number">1</span>] &lt; a[child] &amp;&amp; child + <span class="number">1</span> &lt;n)<span class="comment">//防止没有右孩子</span></span><br><span class="line">		    ++child;</span><br><span class="line">		<span class="comment">//小的往上浮，大的往下浮</span></span><br><span class="line">		<span class="keyword">if</span> (a[child] &lt; a[parent]) &#123;</span><br><span class="line">			<span class="type">int</span> tem = a[parent];</span><br><span class="line">			a[parent] = a[child];</span><br><span class="line">			a[child] = tem;</span><br><span class="line">			parent = child;</span><br><span class="line">			child = parent * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//中途child&gt;parent则已满足小堆，直接break</span></span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>2.3 堆的向上调整算法<br>使用场景：向堆中插入数据，需要使用向上调整算法调整，因为向堆中插入数据是将数据插入到下标为size的位置，此时就不满足小堆(大堆)，因此，需要堆其进行调整，向上调整算法和向下调整算法思路类似，此处以小堆为例，向上调整法只需从插入的节点位置开始和父节点比较，若a[chaild]&lt;a[parent],则交换，若a[chaild]&gt;=a[parent]则说明越界满足小堆，直接break</p>
<p>2.4 向上调整算法(建小堆)实现<br>//堆的向上调整算法<br>//建小堆</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">AdjustUp</span><span class="params">(HPDataType* a, <span class="type">int</span> child)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> parent = (child - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">	<span class="keyword">while</span> (child &gt; <span class="number">0</span>) &#123;</span><br><span class="line">		<span class="keyword">if</span> (a[child] &lt; a[parent]) &#123;</span><br><span class="line">			<span class="type">int</span> tem = a[parent];</span><br><span class="line">			a[parent] = a[child];</span><br><span class="line">			a[child] = tem;</span><br><span class="line">			child = parent;</span><br><span class="line">			parent = (child - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>2.5 数组建堆算法(建小堆)<br>若左右子树不是小堆——想办法把左右子树处理成小堆<br>可以从倒数第一个非叶子节点的位置开始向下调整</p>
</blockquote>
<blockquote>
<p>2.6 数组建堆算法(建小堆)实现</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> n = <span class="built_in">sizeof</span>(a) / <span class="built_in">sizeof</span>(<span class="type">int</span>);</span><br><span class="line">	<span class="comment">//数组建堆算法</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = (n - <span class="number">1</span> - <span class="number">1</span>) / <span class="number">2</span>; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">AdjustDown</span>(arr, n, i);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>2.7 堆排序(降序)<br>下面我们将上面建好的小堆进行降序排序</p>
<p>堆排序(降序)的核心思想：因为建小堆可以选出最小的数即根节点，我们将每次建好的小堆的最后一个叶子节点和根节点进行交换，交换后不把最后一个数看作堆里的数据，此时根的左右子树依旧是大堆，然后我们再用向下调整算法选出次小的如此循环直到堆里剩一个数结束</p>
<p>• 升序建大堆<br>• 降序建小堆</p>
<p>2.8 堆排序(降序)实现</p>
<p>//降序</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//降序</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">HeapSort</span><span class="params">(<span class="type">int</span>* a, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">	<span class="comment">//建小堆</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = (n - <span class="number">1</span> - <span class="number">1</span>) / <span class="number">2</span>; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">	    <span class="built_in">AdjustDown</span>(a, n, i);</span><br><span class="line">	<span class="type">int</span> end = n - <span class="number">1</span>;</span><br><span class="line">	<span class="comment">//把最小的换到最后一个位置，不把最后一个数看作堆里的</span></span><br><span class="line">	<span class="comment">//每次选出剩下数中最小的</span></span><br><span class="line">	<span class="comment">//从后往前放</span></span><br><span class="line">	<span class="keyword">while</span> (end &gt; <span class="number">0</span>) &#123;</span><br><span class="line">		<span class="type">int</span> tem = a[end];</span><br><span class="line">		a[end] = a[<span class="number">0</span>];</span><br><span class="line">		a[<span class="number">0</span>] = tem;</span><br><span class="line">		<span class="comment">//选出次小的数</span></span><br><span class="line">		<span class="built_in">AdjustDown</span>(a, end, <span class="number">0</span>);</span><br><span class="line">		--end;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">HeapSort</span><span class="params">(<span class="type">int</span>* a, <span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//建小堆</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = (n - <span class="number">1</span> - <span class="number">1</span>) / <span class="number">2</span>; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">AdjustDown</span>(a, n, i);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> end = n - <span class="number">1</span>;</span><br><span class="line">	<span class="comment">//把最小的换到最后一个位置，不把最后一个数看作堆里的</span></span><br><span class="line">	<span class="comment">//每次选出剩下数中最小的</span></span><br><span class="line">	<span class="comment">//从后往前放</span></span><br><span class="line">	<span class="keyword">while</span> (end &gt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> tem = a[end];</span><br><span class="line">		a[end] = a[<span class="number">0</span>];</span><br><span class="line">		a[<span class="number">0</span>] = tem;</span><br><span class="line">		<span class="comment">//选出次小的数</span></span><br><span class="line">		<span class="built_in">AdjustDown</span>(a, end, <span class="number">0</span>);</span><br><span class="line">		--end;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>2.9 建堆的时间复杂度<br>最坏的情况及满二叉树，且每个节点都需要调整</p>
</blockquote>
<blockquote>
<p><strong>由以上推论过程可得建堆的时间复杂度为O(N);<br>向下调整算法的时间复杂度为O(log2N);<br>所以堆排序的时间复杂度为O(N*log2N);</strong></p>
</blockquote>
<h4 id="6-快速排序"><a href="#6-快速排序" class="headerlink" title="6.快速排序"></a>6.快速排序</h4><blockquote>
<p>思路：</p>
<p>快速排序之所以比较快，是因为与冒泡排序相比，每次的交换时跳跃式的，每次排序的时候设置一个基准点，将小于等于基准点的数全部放到基准点的左边，将大于等于基准点的数全部放到基准点的右边。这样在每次交换的时候就不会像冒泡排序一样每次只能在相邻的数之间进行交换，交换的距离就大的多了。因此总的比较和交换次数就少了，速度自然就提高了。当然在最坏的情况下，仍可能是相邻的两个数进行了交换。</p>
</blockquote>
<p>实现快速排序的代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Quick_Sort</span><span class="params">(<span class="type">int</span> *arr, <span class="type">int</span> begin, <span class="type">int</span> end)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(begin &gt; end)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="type">int</span> tmp = arr[begin];</span><br><span class="line">    <span class="type">int</span> i = begin;</span><br><span class="line">    <span class="type">int</span> j = end;</span><br><span class="line">    <span class="keyword">while</span>(i != j)&#123;</span><br><span class="line">        <span class="keyword">while</span>(arr[j] &gt;= tmp &amp;&amp; j &gt; i)</span><br><span class="line">            j--;</span><br><span class="line">        <span class="keyword">while</span>(arr[i] &lt;= tmp &amp;&amp; j &gt; i)</span><br><span class="line">            i++;</span><br><span class="line">        <span class="keyword">if</span>(j &gt; i)&#123;</span><br><span class="line">            <span class="type">int</span> t = arr[i];</span><br><span class="line">            arr[i] = arr[j];</span><br><span class="line">            arr[j] = t;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    arr[begin] = arr[i];</span><br><span class="line">    arr[i] = tmp;</span><br><span class="line">    <span class="built_in">Quick_Sort</span>(arr, begin, i<span class="number">-1</span>);</span><br><span class="line">    <span class="built_in">Quick_Sort</span>(arr, i+<span class="number">1</span>, end);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>快速排序的最差时间复杂度和冒泡排序是一样的都是O(n^2)，</strong></p>
<p><strong>它的平均时间复杂度为O ( n log ⁡ 2 n ) 。</strong></p>
</blockquote>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构基础</tag>
      </tags>
  </entry>
</search>
